//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
'use strict';

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var ParsingService_parse_args = function(args) {
  this.url = null;
  if (args) {
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
  }
};
ParsingService_parse_args.prototype = {};
ParsingService_parse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.url = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ParsingService_parse_args.prototype.write = function(output) {
  output.writeStructBegin('ParsingService_parse_args');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ParsingService_parse_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
    }
  }
};
ParsingService_parse_result.prototype = {};
ParsingService_parse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size0 = 0;
          var _rtmp34;
          this.success = {};
          var _ktype1 = 0;
          var _vtype2 = 0;
          _rtmp34 = input.readMapBegin();
          _ktype1 = _rtmp34.ktype;
          _vtype2 = _rtmp34.vtype;
          _size0 = _rtmp34.size;
          for (var _i5 = 0; _i5 < _size0; ++_i5) {
            var key6 = null;
            var val7 = null;
            key6 = input.readString();
            var _size8 = 0;
            var _rtmp312;
            val7 = [];
            var _etype11 = 0;
            _rtmp312 = input.readListBegin();
            _etype11 = _rtmp312.etype;
            _size8 = _rtmp312.size;
            for (var _i13 = 0; _i13 < _size8; ++_i13) {
              var elem14 = null;
              elem14 = input.readString();
              val7.push(elem14);
            }
            input.readListEnd();
            this.success[key6] = val7;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ParsingService_parse_result.prototype.write = function(output) {
  output.writeStructBegin('ParsingService_parse_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(
      Thrift.Type.STRING,
      Thrift.Type.LIST,
      Thrift.objectLength(this.success)
    );
    for (var kiter15 in this.success) {
      if (this.success.hasOwnProperty(kiter15)) {
        var viter16 = this.success[kiter15];
        output.writeString(kiter15);
        output.writeListBegin(Thrift.Type.STRING, viter16.length);
        for (var iter17 in viter16) {
          if (viter16.hasOwnProperty(iter17)) {
            iter17 = viter16[iter17];
            output.writeString(iter17);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ParsingServiceClient = (exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
});
ParsingServiceClient.prototype = {};
ParsingServiceClient.prototype.seqid = function() {
  return this._seqid;
};
ParsingServiceClient.prototype.new_seqid = function() {
  return (this._seqid += 1);
};
ParsingServiceClient.prototype.parse = function(url, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_parse(url);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_parse(url);
  }
};

ParsingServiceClient.prototype.send_parse = function(url) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('parse', Thrift.MessageType.CALL, this.seqid());
  var params = {
    url: url
  };
  var args = new ParsingService_parse_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ParsingServiceClient.prototype.recv_parse = function(input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ParsingService_parse_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('parse failed: unknown result');
};
var ParsingServiceProcessor = (exports.Processor = function(handler) {
  this._handler = handler;
});
ParsingServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(
      Thrift.TApplicationExceptionType.UNKNOWN_METHOD,
      'Unknown function ' + r.fname
    );
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
ParsingServiceProcessor.prototype.process_parse = function(
  seqid,
  input,
  output
) {
  var args = new ParsingService_parse_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.parse.length === 1) {
    Q.fcall(this._handler.parse.bind(this._handler), args.url).then(
      function(result) {
        var result_obj = new ParsingService_parse_result({ success: result });
        output.writeMessageBegin('parse', Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      },
      function(err) {
        var result;
        result = new Thrift.TApplicationException(
          Thrift.TApplicationExceptionType.UNKNOWN,
          err.message
        );
        output.writeMessageBegin('parse', Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }
    );
  } else {
    this._handler.parse(args.url, function(err, result) {
      var result_obj;
      if (err === null || typeof err === 'undefined') {
        result_obj = new ParsingService_parse_result(
          err !== null || typeof err === 'undefined' ? err : { success: result }
        );
        output.writeMessageBegin('parse', Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(
          Thrift.TApplicationExceptionType.UNKNOWN,
          err.message
        );
        output.writeMessageBegin('parse', Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
