//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

//HELPER FUNCTIONS AND STRUCTURES

tutorial.ParsingService_parse_args = function(args) {
  this.url = null;
  if (args) {
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
  }
};
tutorial.ParsingService_parse_args.prototype = {};
tutorial.ParsingService_parse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.url = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

tutorial.ParsingService_parse_args.prototype.write = function(output) {
  output.writeStructBegin('ParsingService_parse_args');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

tutorial.ParsingService_parse_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
    }
  }
};
tutorial.ParsingService_parse_result.prototype = {};
tutorial.ParsingService_parse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size0 = 0;
          var _rtmp34;
          this.success = {};
          var _ktype1 = 0;
          var _vtype2 = 0;
          _rtmp34 = input.readMapBegin();
          _ktype1 = _rtmp34.ktype;
          _vtype2 = _rtmp34.vtype;
          _size0 = _rtmp34.size;
          for (var _i5 = 0; _i5 < _size0; ++_i5) {
            if (_i5 > 0) {
              if (input.rstack.length > input.rpos[input.rpos.length - 1] + 1) {
                input.rstack.pop();
              }
            }
            var key6 = null;
            var val7 = null;
            key6 = input.readString().value;
            var _size8 = 0;
            var _rtmp312;
            val7 = [];
            var _etype11 = 0;
            _rtmp312 = input.readListBegin();
            _etype11 = _rtmp312.etype;
            _size8 = _rtmp312.size;
            for (var _i13 = 0; _i13 < _size8; ++_i13) {
              var elem14 = null;
              elem14 = input.readString().value;
              val7.push(elem14);
            }
            input.readListEnd();
            this.success[key6] = val7;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

tutorial.ParsingService_parse_result.prototype.write = function(output) {
  output.writeStructBegin('ParsingService_parse_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(
      Thrift.Type.STRING,
      Thrift.Type.LIST,
      Thrift.objectLength(this.success)
    );
    for (var kiter15 in this.success) {
      if (this.success.hasOwnProperty(kiter15)) {
        var viter16 = this.success[kiter15];
        output.writeString(kiter15);
        output.writeListBegin(Thrift.Type.STRING, viter16.length);
        for (var iter17 in viter16) {
          if (viter16.hasOwnProperty(iter17)) {
            iter17 = viter16[iter17];
            output.writeString(iter17);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

tutorial.ParsingServiceClient = function(input, output) {
  this.input = input;
  this.output = !output ? input : output;
  this.seqid = 0;
};
tutorial.ParsingServiceClient.prototype = {};
tutorial.ParsingServiceClient.prototype.parse = function(url, callback) {
  this.send_parse(url, callback);
  if (!callback) {
    return this.recv_parse();
  }
};

tutorial.ParsingServiceClient.prototype.send_parse = function(url, callback) {
  this.output.writeMessageBegin('parse', Thrift.MessageType.CALL, this.seqid);
  var params = {
    url: url
  };
  var args = new tutorial.ParsingService_parse_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_parse();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

tutorial.ParsingServiceClient.prototype.recv_parse = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new tutorial.ParsingService_parse_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'parse failed: unknown result';
};
